{
	"info": {
		"_postman_id": "6d707d03-9b08-4deb-b4e5-d451fc5640fd",
		"name": "Interview Taker",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "35008682"
	},
	"item": [
		{
			"name": "start_interview",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = JSON.parse(pm.response.text());\r",
							"pm.collectionVariables.set(\"thread_id\", response.thread_id)"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/start_conversation",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"start_conversation"
					]
				}
			},
			"response": []
		},
		{
			"name": "upload_resume",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "file",
							"type": "file",
							"src": "ImldCGsYQ/Mrunmay_chichkhede_resume.pdf"
						}
					]
				},
				"url": {
					"raw": "{{baseUrl}}/upload-resume/thread_id={{thread_id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"upload-resume",
						"thread_id={{thread_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "human_resume_submit_feedback",
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"user_message\": \"h1\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/resume_conversation/thread_id={{thread_id}}&next_state=human_resume_submit_feedback&interview_type=none",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"resume_conversation",
						"thread_id={{thread_id}}&next_state=human_resume_submit_feedback&interview_type=none"
					]
				}
			},
			"response": []
		},
		{
			"name": "human_select_interview_type",
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"user_message\": \"h1\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/resume_conversation/thread_id={{thread_id}}&next_state=human_select_interview_type&interview_type=MERN_STACK",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"resume_conversation",
						"thread_id={{thread_id}}&next_state=human_select_interview_type&interview_type=MERN_STACK"
					]
				}
			},
			"response": []
		},
		{
			"name": "welcome_hr_section",
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/resume_conversation/thread_id={{thread_id}}&next_state=welcome_hr_section&interview_type=MERN_STACK",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"resume_conversation",
						"thread_id={{thread_id}}&next_state=welcome_hr_section&interview_type=MERN_STACK"
					]
				}
			},
			"response": []
		},
		{
			"name": "human_hr_filter_feedback",
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"userMessage\":\"I maintain work-life balance through proactive planning and prioritization. I set clear boundaries between work and personal time, using techniques like time blocking and focused work sprints.1   To avoid burnout, I prioritize regular exercise, pursue hobbies, and ensure adequate rest.  Open communication with my team about workload and deadlines is crucial. I believe a balanced life enhances productivity and creativity, allowing me to contribute effectively even in demanding environments. Â  \"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/resume_conversation/thread_id={{thread_id}}&next_state=human_hr_filter_feedback&interview_type=MERN_STACK",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"resume_conversation",
						"thread_id={{thread_id}}&next_state=human_hr_filter_feedback&interview_type=MERN_STACK"
					]
				}
			},
			"response": []
		},
		{
			"name": "welcome_tech_round_one",
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/resume_conversation/thread_id={{thread_id}}&next_state=welcome_tech_round_one&interview_type=MERN_STACK",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"resume_conversation",
						"thread_id={{thread_id}}&next_state=welcome_tech_round_one&interview_type=MERN_STACK"
					]
				}
			},
			"response": []
		},
		{
			"name": "human_tech_round_one_feedback",
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"userMessage\":\"For scalability, I'd index events.category, events.keywords, and events.date in MongoDB to speed up queries.  I'd also index users._id and fields within users.preferences.  Redis caching can store frequently accessed user preferences and top event recommendations, reducing database load.  These strategies minimize query time and improve response latency, allowing the system to handle a growing number of users and events efficiently.\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/resume_conversation/thread_id={{thread_id}}&next_state=human_tech_round_one_feedback&interview_type=MERN_STACK",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"resume_conversation",
						"thread_id={{thread_id}}&next_state=human_tech_round_one_feedback&interview_type=MERN_STACK"
					]
				}
			},
			"response": []
		},
		{
			"name": "welcome_tech_round_two",
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/resume_conversation/thread_id={{thread_id}}&next_state=welcome_tech_round_two&interview_type=MERN_STACK",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"resume_conversation",
						"thread_id={{thread_id}}&next_state=welcome_tech_round_two&interview_type=MERN_STACK"
					]
				}
			},
			"response": []
		},
		{
			"name": "human_tech_round_two_feedback",
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"userMessage\":\"For real-time upload progress, I'd use WebSockets.  During upload, the server would emit progress events (e.g., bytes transferred, percentage complete) to the client via WebSockets.  The client would listen for these events and update the UI accordingly.  For interruptions, I'd implement resumable uploads using range requests and store upload state (e.g., last uploaded chunk) in MongoDB.  This allows resuming interrupted uploads without restarting from scratch.\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/resume_conversation/thread_id={{thread_id}}&next_state=human_tech_round_two_feedback&interview_type=MERN_STACK",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"resume_conversation",
						"thread_id={{thread_id}}&next_state=human_tech_round_two_feedback&interview_type=MERN_STACK"
					]
				}
			},
			"response": []
		},
		{
			"name": "init_final_hr_round",
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"userMessage\":\"I'd use Mongoose to define a blog post schema (title, content, author, etc.).  API routes would include POST /posts (create), GET /posts (read all), GET /posts/:id (read one), PUT /posts/:id (update), DELETE /posts/:id (delete).  Data validation would use Joi or Express-validator. Error handling middleware would catch database and validation errors, returning appropriate status codes.  Efficient queries would use Mongoose methods like findById, find, and pagination.\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/resume_conversation/thread_id={{thread_id}}&next_state=init_final_hr_round&interview_type=MERN_STACK",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"resume_conversation",
						"thread_id={{thread_id}}&next_state=init_final_hr_round&interview_type=MERN_STACK"
					]
				}
			},
			"response": []
		},
		{
			"name": "human_final_hr_round_feedback",
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"userMessage\":\"31st\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/resume_conversation/thread_id={{thread_id}}&next_state=human_final_hr_round_feedback&interview_type=MERN_STACK",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"resume_conversation",
						"thread_id={{thread_id}}&next_state=human_final_hr_round_feedback&interview_type=MERN_STACK"
					]
				}
			},
			"response": []
		},
		{
			"name": "getState",
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"user_message\": \"h1\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/get-thread-state/thread_id={{thread_id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"get-thread-state",
						"thread_id={{thread_id}}"
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "thread_id",
			"value": "",
			"type": "default"
		},
		{
			"key": "thread_id",
			"value": ""
		}
	]
}